/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var jrc = ee.Image("JRC/GSW1_0/GlobalSurfaceWater"),
    aoi = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-76.89038803827464, 36.60111542950342],
          [-76.88807060968577, 36.569963911305194],
          [-76.8831782604426, 36.562794526386504],
          [-76.86026146661936, 36.56458693499978],
          [-76.84927513849436, 36.57671906888946],
          [-76.86584046137034, 36.606145358278376],
          [-76.89399292719065, 36.60697216449592]]]),
    clouds = /* color: #98ff00 */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-76.86585131631887, 36.59628946713055],
                  [-76.86997118936574, 36.599734874730856],
                  [-76.87580767618215, 36.59628946713055],
                  [-76.87666598306691, 36.59008734573838],
                  [-76.87409106241262, 36.58719285183644],
                  [-76.87271777139699, 36.59215477492167],
                  [-76.86911288248098, 36.58774419237727],
                  [-76.86430636392629, 36.59022517607369],
                  [-76.86344805704152, 36.59380867839079],
                  [-76.8649930094341, 36.59518690420395]]]),
            {
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-76.88044253335988, 36.576303069198566],
                  [-76.87391940103566, 36.57271875414481],
                  [-76.86911288248098, 36.57602735856268],
                  [-76.86911288248098, 36.58209276513593],
                  [-76.87632266031301, 36.58223060974748],
                  [-76.87821093545949, 36.57988721787754]]]),
            {
              "system:index": "1"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var occ = jrc.select(['occurrence']);
var colors = ['#a50026','#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4','#313695'];

var woi = occ.clip(aoi);

Map.centerObject(aoi);

Map.addLayer(woi.selfMask(), {palette: ['white', 'black'], min: 1, max: 100}, 'occ', true, 1);

var waterLevelSlider = ui.Slider(0, 100, 0, 1);
waterLevelSlider.onChange(function(v) {
  Map.layers().set(1, ui.Map.Layer(woi.gte(ee.Number(100).subtract(ee.Number(v))).selfMask(), {palette: 'cyan'}, 'water', true, 0.6));
});
waterLevelSlider.style({'minWidth': '800px', 'stretch': 'horizontal'});



// test an ideal case
var showExample = true;
var lakeExtentThreshold = 50;

var waterMaskTrue = woi.gte(lakeExtentThreshold).unmask(0, false).clip(aoi); // true lake extent

// imput to the algorithm
var cloudMask = ee.Image.constant(0).clip(aoi).toByte().paint(clouds, 1); // cloud mask layer
var waterMask = waterMaskTrue.where(cloudMask, 0); // clouded water mask layer

Map.addLayer(waterMask, {}, 'waterMask', true && showExample);
Map.addLayer(cloudMask.selfMask(), {palette: ['white']}, 'cloudMask', false && showExample);

// calculate occurrence stats along lake shore

var kernel = ee.Kernel.circle({radius: 1});

var lakeShore = waterMask
.subtract(waterMask.focal_min({kernel: kernel, iterations: 1}))
.subtract(cloudMask.focal_max({kernel: kernel, iterations: 1}))
.gt(0);

Map.addLayer(lakeShore.selfMask(), {palette: ['brown']}, 'lakeShore', true && showExample);

var combinedReducer = ee.Reducer.mean()
.combine(ee.Reducer.median(), '', true)
.combine(ee.Reducer.percentile([0, 10, 50, 90, 100]), '', true)
.combine(ee.Reducer.stdDev(), '', true);

var shoreLineStats = woi.mask(lakeShore)
.reduceRegion(combinedReducer, aoi).aside(print);

var ShoreLineOcc = shoreLineStats.get('occurrence_p10').aside(print);

// reconstruct lake extent
var reconCloudCoveredLake = woi.gte(ee.Image.constant(ShoreLineOcc)).and(cloudMask);
var reconLake = waterMask.or(reconCloudCoveredLake);

Map.addLayer(reconCloudCoveredLake.selfMask(), {palette: ['blue']}, 'reconCloudCoveredLake', false && showExample, 0.5);
Map.addLayer(reconLake.selfMask(), {palette: ['blue']}, 'reconLake', true && showExample, 0.5);

// add true shoreline for comparison
var trueShoreline = waterMaskTrue.focal_max({kernel: kernel, iterations: 1}).subtract(waterMaskTrue);
Map.addLayer(trueShoreline.selfMask(), {palette: ['red']}, 'trueShoreline', true && showExample, 1);
