/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var s2_cloud_probability = ee.ImageCollection("COPERNICUS/S2_CLOUD_PROBABILITY"),
    s2 = ee.ImageCollection("COPERNICUS/S2"),
    geometry2 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[19.162470793708334, 11.449503809623367],
          [19.162470793708334, 9.908416731301049],
          [20.266596770270834, 9.908416731301049],
          [20.266596770270834, 11.449503809623367]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var START_DATE = ee.Date.fromYMD(2016,5, 1);

var END_DATE = ee.Date.fromYMD(2016, 9, 1);

var statistic = 'MEDIAN' // 2 valid values 'MAX' or 'MEDIAN'



var AOI = geometry2;

var CLOUD_FILTER = 60;

var CLD_PRB_THRESH = 50;

var NIR_DRK_THRESH = 0.15;

var CLD_PRJ_DIST = 1;

var BUFFER = 50;

//*******************************************************

//********  FUNCTIONS  ******************************

//******************************************************

var get_s2_sr_cld_col = function(aoi, start_date, end_date){

 // Import and filter S2 SR.

    var s2_sr_col = (s2

        .filterBounds(aoi)

        .filterDate(start_date, end_date)

        .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE', CLOUD_FILTER)))



  //Import and filter s2cloudless.

    var s2_cloudless_col = (s2_cloud_probability

        .filterBounds(aoi)

        .filterDate(start_date, end_date))



    // Join the filtered s2cloudless collection to the SR collection by the 'system:index' property.

    return ee.ImageCollection(ee.Join.saveFirst('s2cloudless').apply({

        'primary': s2_sr_col,

        'secondary': s2_cloudless_col,

        'condition': ee.Filter.equals({

            'leftField': 'system:index',

            'rightField': 'system:index'

        })

    }))

}



var add_cloud_bands = function(img){

  // Get s2cloudless image, subset the probability band.

    var cld_prb = ee.Image(img.get('s2cloudless')).select('probability')



    // Condition s2cloudless by the probability threshold value.

    var is_cloud = cld_prb.gt(CLD_PRB_THRESH).rename('clouds')



    // Add the cloud probability layer and cloud mask as image bands.

    return img.addBands(ee.Image([cld_prb, is_cloud]))

}



var add_shadow_bands = function(img){

  // Identify water pixels from the SCL band.

    



    // Identify dark NIR pixels that are not water (potential cloud shadow pixels).

    var SR_BAND_SCALE = 1e4

    var dark_pixels = img.select('B8').lt(NIR_DRK_THRESH*SR_BAND_SCALE)

      

      .rename('dark_pixels')



    // Determine the direction to project cloud shadow from clouds (assumes UTM projection).

    var shadow_azimuth = ee.Number(90).subtract(ee.Number(img.get('MEAN_SOLAR_AZIMUTH_ANGLE')));



    // Project shadows from clouds for the distance specified by the CLD_PRJ_DIST input.

    var cld_proj = (img.select('clouds').directionalDistanceTransform(shadow_azimuth, CLD_PRJ_DIST*10)

        .reproject({'crs': img.select(0).projection(), 'scale': 100})

        .select('distance')

        .mask()

        .rename('cloud_transform'))



    // Identify the intersection of dark pixels with cloud shadow projection.

    var shadows = cld_proj.multiply(dark_pixels).rename('shadows')



    // Add dark pixels, cloud projection, and identified shadows as image bands.

    return img.addBands(ee.Image([dark_pixels, cld_proj, shadows]))

}





var add_cld_shdw_mask = function(img){

  // Add cloud component bands.

    var img_cloud = add_cloud_bands(img)



    // Add cloud shadow component bands.

    var img_cloud_shadow = add_shadow_bands(img_cloud)



    // Combine cloud and shadow mask, set cloud and shadow as value 1, else 0.

    var is_cld_shdw = img_cloud_shadow.select('clouds').add(img_cloud_shadow.select('shadows')).gt(0)



    // Remove small cloud-shadow patches and dilate remaining pixels by BUFFER input.

    // 20 m scale is for speed, and assumes clouds don't require 10 m precision.

    is_cld_shdw = (is_cld_shdw.focal_min(2).focal_max(BUFFER*2/20)

        .reproject({'crs': img.select([0]).projection(), 'scale': 20})

        .rename('cloudmask'))



    // Add the final cloud-shadow mask to the image.

    return img_cloud_shadow.addBands(is_cld_shdw)

}



var apply_cld_shdw_mask = function(img){

    // Subset the cloudmask band and invert it so clouds/shadow are 0, else 1.

    var not_cld_shdw = img.select('cloudmask').not()



    

    return img.select('B.*').updateMask(not_cld_shdw)

}



var addSWI = function(image) {

  var mndwi = image.normalizedDifference(['B5', 'B11']).rename('SWI');

  return image.addBands(mndwi);

};



var addMNDWI_S2 = function(image) {

  var mndwi = image.normalizedDifference(['B3', 'B11']).rename('MNDWI');

  return image.addBands(mndwi);

};



var addNDVI_S2 = function(image) {

  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');

  return image.addBands(ndvi);

};

var addSAVI_S2 = function(image) {

  var savi=image.expression(

     '((NIR-RED) / (RED+NIR+0.5))*(1.5)', {

        'RED': image.select('B4'),

        'NIR': image.select('B8')

  }).rename('SAVI');

  return image.addBands(savi);

};

//**********************************************************************

//*******************************************************************



var s2_sr_cld_col_eval = get_s2_sr_cld_col(AOI, START_DATE, END_DATE);

print(s2_sr_cld_col_eval);

var s2_sr = (

             

                             s2_sr_cld_col_eval.map(addSWI)

                             .map(addMNDWI_S2)

                             .map(addSAVI_S2)

                             .map(addNDVI_S2))

if (statistic =='MAX'){ s2_sr = s2_sr.max()}

if (statistic =='MEDIAN') {s2_sr = s2_sr.median()}



Map.addLayer(s2_sr.select(['B12', 'B8A', 'B4']), {

  'min': 0, 

  'max':12000

}, 'GreenVegeComposite')

Map.addLayer(s2_sr.select(['B12']), {

  'min': 0, 

  'max':6000

}, 'MIR')

Map.addLayer(s2_sr.select(['SWI']), {

  'min': -1, 

  'max':1

}, 'SWI')

Map.addLayer(s2_sr.select(['SAVI']), {

  'min': 0, 

  'max':1

}, 'SAVI')



