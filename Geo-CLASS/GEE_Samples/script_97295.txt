/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-46.66671034569674, -23.57461725355651],
          [-46.66671034569674, -23.79093065905581],
          [-46.37007948632174, -23.79093065905581],
          [-46.37007948632174, -23.57461725355651]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var inicio = '2022-05-01'

var fim = '2022-07-30'



// Construct a collection of corresponding Dynamic World and Sentinel-2 for

// inspection. Filter the DW and S2 collections by region and date.

var dwCol = ee.ImageCollection('GOOGLE/DYNAMICWORLD/V1')



  .filterDate(inicio, fim)

  ;

var s2Col = ee.ImageCollection('COPERNICUS/S2')

  .filterBounds(geometry)

  .filterDate(inicio, fim)

  ;



// Join corresponding DW and S2 images (by system:index).

var DwS2Col = ee.Join.saveFirst('s2_img').apply(dwCol, s2Col,

    ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'}));



// Extract an example DW image and its source S2 image.

var dwImage = ee.Image(DwS2Col.first());

var s2Image = ee.Image(dwImage.get('s2_img'));



// Create a visualization that blends DW class label with probability.

// Define list pairs of DW LULC label and color.

var CLASS_NAMES = [

    'water', 'trees', 'grass', 'flooded_vegetation', 'crops',

    'shrub_and_scrub', 'built', 'bare', 'snow_and_ice'];



var VIS_PALETTE = [

    '419BDF', '397D49', '88B053', '7A87C6',

    'E49635', 'DFC35A', 'C4281B', 'A59B8F',

    'B39FE1'];



// Create an RGB image of the label (most likely class) on [0, 1].

var dwRgb = dwImage

    .select('label')

    .visualize({min: 0, max: 8, palette: VIS_PALETTE})

    .divide(255);



// Get the most likely class probability.

var top1Prob = dwImage.select(CLASS_NAMES).reduce(ee.Reducer.max());





var top1ProbHillshade =

    ee.Terrain.hillshade(top1Prob.multiply(10))

    .divide(255);



// Combine the RGB image with the hillshade.

var dwRgbHillshade = dwRgb.multiply(top1ProbHillshade);

 

// Display the Dynamic World visualization with the source Sentinel-2 image.

Map.centerObject(geometry, 12);

Map.addLayer(

    s2Image,

    {min: 1200, max: 4000, bands: ['B4', 'B3', 'B2']},

    'Sentinel-2 L1C');

Map.addLayer(

    dwRgbHillshade,

    {min: 0, max: 0.65},

    'Dynamic World')



// Legend

var legend = ui.Panel({style: {position: 'bottom-left',

  padding: '5px 5px'}});                  



var legendTitle = ui.Label({value: 'LULC',style: {fontWeight: 'bold',

  fontSize: '14px', margin: '0 0 4px 0', padding: '0'}});



legend.add(legendTitle);                                                                           



var makeRow = function(color,name){



var colorBox = ui.Label({style: {backgroundColor: '#' + color, padding: '9px',

  margin: '0 0 8px 0' }});

var description = ui.Label({value: name, style: {margin: '0 0 4px 6px'}});                       



return ui.Panel({widgets: [colorBox, description], layout: ui.Panel.Layout.Flow('horizontal')})};  



var palette = ['419BDF', '397D49', '88B053', '7A87C6', 'E49635', 'DFC35A', 'C4281B', 'A59B8F', 'B39FE1'];                        



var names = ['water', 'trees', 'grass', 'flooded_vegetation', 'crops', 'shrub_and_scrub',

  'built', 'bare', 'snow_and_ice'];

  

for (var i = 0; i < 9; i++) {legend.add(makeRow(palette[i], names[i]));}                           



Map.add(legend); 

