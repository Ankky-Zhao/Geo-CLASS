/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var location = 
    /* color: #d63000 */
    /* locked: true */
    ee.Geometry.Point([35.23444007543858, -8.565566682461071]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var training = ee.FeatureCollection('users/kimambo/00_INPUT_TRAINING_VALIDATION/Tanzania_SouthernHighlands_reference_point_36LYR_13DEC2019_230_upto799_75PCTTRAINING');
print('Training Points',training);
Map.centerObject(location,10);
Map.setOptions('SATELLITE');


// Set date parameters to filter by. 
// Anything longer than two years will probably take a long time to run.
var start0='2019-01-1';
var end0='2020-12-31';

// Filter by month if desired.
var startmonth= ee.Number(1);
var endmonth=  ee.Number(12);
var kernalsize =ee.Number(30);


/*
Woodlot_Young
Woodlot_Intermediate
Woodlot_Mature
Harvested
*/
// Choose a land cover type to filter the full training collection down to.
var landcover = 'Harvested';
var samplePoints = training.filter(ee.Filter.eq('Class_Text',landcover));
print('Points of the Specified Land Cover',samplePoints);



// Cloud mask for Landsat 8.
    var cloudMaskL8 = function(image) {
  var qa = image.select('pixel_qa');
  var cloud = qa.bitwiseAnd(1 << 5)              
                .and(qa.bitwiseAnd(1 << 6).or(qa.bitwiseAnd(1 << 7))) 
                .or(qa.bitwiseAnd(1 << 4))
                .or(qa.bitwiseAnd(1 << 3))  
                .or(qa.bitwiseAnd(1 << 8).and(qa.bitwiseAnd(1 << 9)));   
  var mask2 = image.mask().reduce(ee.Reducer.min());
  return image.select(['B2','B3','B4','B5','B6','B7'],['blue', 'green', 'red', 'nir', 'swir1', 'swir2']) 
      .updateMask(cloud.not()).updateMask(mask2);
};
// Cloud mask for Landsat 4 through 7.
var cloudMaskL457 = function(image) {
  var qa = image.select('pixel_qa');
  var cloud = qa.bitwiseAnd(1 << 5)
          .and(qa.bitwiseAnd(1 << 7))
          .or(qa.bitwiseAnd(1 << 3))
          .or(qa.bitwiseAnd(1 << 4));

  var mask2 = image.mask().reduce(ee.Reducer.min());
  return image.select(['B1', 'B2', 'B3', 'B4', 'B5', 'B7'],
    ['blue', 'green', 'red', 'nir', 'swir1', 'swir2'])
    .updateMask(cloud.not()).updateMask(mask2);
};


var bsiL8=function(image){
  var bsi=image.select('swir2').add(image.select('red'))
        .subtract(image.select('nir')).subtract(image.select('blue'))
        .divide(image.select('swir2').add(image.select('red'))
        .add(image.select('nir')).add(image.select('blue')))
        .rename('bsi');
        return image.addBands(bsi);
};

  var collectionL8_bsi = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
    .filterDate(start0, end0)
      .filterBounds(location)
    .filter(ee.Filter.calendarRange(startmonth,endmonth,'month'))
    .map(cloudMaskL8)
    .map(bsiL8)
    .select('bsi');

var bsiL7=function(image){
  var bsi=image.select('swir2').add(image.select('red'))
        .subtract(image.select('nir')).subtract(image.select('blue'))
        .divide(image.select('swir2').add(image.select('red'))
        .add(image.select('nir')).add(image.select('blue')))
        .rename('bsi');
        return image.addBands(bsi);
  
};

  var collectionL7_bsi = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
    .filterDate(start0, end0)
    .filterBounds(location)
    .filter(ee.Filter.calendarRange(startmonth,endmonth,'month'))
    .map(cloudMaskL457)
    .map(bsiL7)
    .select('bsi');
    
  var collectionL5_bsi = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
    .filterDate(start0, end0)
    .filterBounds(location)
    .filter(ee.Filter.calendarRange(startmonth,endmonth,'month'))
    .map(cloudMaskL457)
    .map(bsiL7)
    .select('bsi');
    
  var collectionL4_bsi = ee.ImageCollection('LANDSAT/LT04/C01/T1_SR')
    .filterDate(start0, end0)
    .filterBounds(location)
    .filter(ee.Filter.calendarRange(startmonth,endmonth,'month'))
    .map(cloudMaskL457)
    .map(bsiL7)
    .select('bsi');  

var collection_bsi = collectionL8_bsi.merge(collectionL5_bsi).merge(collectionL4_bsi)
                       .merge(collectionL7_bsi);
print('Merged BSI Collection',collection_bsi);



// Rename each image's BSI band with the time the image was taken, in seconds.

// Rename each image's BSI band as the date the image was taken.

var RenameBSI_AsDate = function(image){
  var date = ee.String(image.get('SENSING_TIME')).slice(0,10);
  return image.select('bsi').rename
  
  (date);
};
var renamed = collection_bsi.map(RenameBSI_AsDate);
print('BSI Bands Renamed As Date',renamed);

// Sort the collection by time.
var sorted = renamed.sort('system:time_start');



// Sample each image's BSI value at each training point of the specified land cover type.
var sampler = function(image, previous){
  var unmasked = image.unmask(-10);
  return unmasked.sampleRegions({
    collection: ee.FeatureCollection(previous),
    geometries: true,
  });
};

// Apply the sampling function iteratively and make sure the result is a Feature Collection.
var sampled = sorted.iterate(sampler, samplePoints);
var outputTable = ee.FeatureCollection(sampled);



var fileName = 'Harvested_2019_2020_BSI';
var folderName = 'HW_BSI';
Export.table.toDrive({
  collection: outputTable,
  description: fileName,
  folder: folderName,
  fileFormat: 'CSV',
});
