/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var polygon = ee.FeatureCollection("users/Katemiller125/Illilouette");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var dataset = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
    .filterDate('2010-07-01', '2010-07-16');

var visParams = {
  bands: ['SR_B2'],
};

//Load shapefile 
var empty = ee.Image().byte();
var ICB = empty.paint({
  featureCollection: polygon,
  color: 1,
  width: 3
});


var pts = ee.FeatureCollection([
  ee.Feature(ee.Geometry.Point([-119.56, 37.724]), {plot_id: 1}),
  ee.Feature(ee.Geometry.Point([-119.557, 37.725]), {plot_id: 2}),
  ee.Feature(ee.Geometry.Point([-119.567, 37.719]), {plot_id: 3}),
  ee.Feature(ee.Geometry.Point([-119.566, 37.721]), {plot_id: 4}),
  ee.Feature(ee.Geometry.Point([-119.55, 37.724]), {plot_id: 5}),
  ee.Feature(ee.Geometry.Point([-119.548, 37.726]), {plot_id: 6}),
  ee.Feature(ee.Geometry.Point([-119.542, 37.723]), {plot_id: 7}),
  ee.Feature(ee.Geometry.Point([-119.558, 37.708]), {plot_id: 8}),
  ee.Feature(ee.Geometry.Point([-119.551, 37.711]), {plot_id: 9})
]);

Map.setCenter(-119.4615, 37.6415,14);
Map.addLayer(dataset,visParams);
Map.addLayer(ICB, {palette: 'FF0000'}, 'ICB');
Map.addLayer(pts, {color: 'FF0000'});

function bufferPoints(radius, bounds) {
  return function(pt) {
    pt = ee.Feature(pt);
    return bounds ? pt.buffer(radius).bounds() : pt.buffer(radius);
  };
}

function zonalStats(ic, fc, params) {
  // Initialize internal params dictionary.
  var _params = {
    reducer: ee.Reducer.mean(),
    scale: null,
    crs: null,
    bands: null,
    bandsRename: null,
    imgProps: null,
    imgPropsRename: null,
    datetimeName: 'datetime',
    datetimeFormat: 'YYYY-MM-dd HH:mm:ss'
  };

  // Replace initialized params with provided params.
  if (params) {
    for (var param in params) {
      _params[param] = params[param] || _params[param];
    }
  }

  // Set default parameters based on an image representative.
  var imgRep = ic.first();
  var nonSystemImgProps = ee.Feature(null)
    .copyProperties(imgRep).propertyNames();
  if (!_params.bands) _params.bands = imgRep.bandNames();
  if (!_params.bandsRename) _params.bandsRename = _params.bands;
  if (!_params.imgProps) _params.imgProps = nonSystemImgProps;
  if (!_params.imgPropsRename) _params.imgPropsRename = _params.imgProps;

  // Map the reduceRegions function over the image collection.
  var results = ic.map(function(img) {
    // Select bands (optionally rename), set a datetime & timestamp property.
    img = ee.Image(img.select(_params.bands, _params.bandsRename))
      .set(_params.datetimeName, img.date().format(_params.datetimeFormat))
      .set('timestamp', img.get('system:time_start'));

    // Define final image property dictionary to set in output features.
    var propsFrom = ee.List(_params.imgProps)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var propsTo = ee.List(_params.imgPropsRename)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var imgProps = img.toDictionary(propsFrom).rename(propsFrom, propsTo);

    // Subset points that intersect the given image.
    var fcSub = fc.filterBounds(img.geometry());

    // Reduce the image by regions.
    return img.reduceRegions({
      collection: fcSub,
      reducer: _params.reducer,
      scale: _params.scale,
      crs: _params.crs
    })
    // Add metadata to each feature.
    .map(function(f) {
      return f.set(imgProps);
    });
  }).flatten().filter(ee.Filter.notNull(_params.bandsRename));

  return results;
}
  
function fmask(img) {
  var cloudShadowBitMask = 1 << 3;
  var cloudsBitMask = 1 << 5;
  var qa = img.select('pixel_qa');
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
    .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return img.updateMask(mask);
}

function renameEtm(img) {
  return img.select(
    ['B1', 'B2', 'B3', 'B4', 'B5', 'B7'],
    ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2']);
}

function prepEtm(img) {
  img = fmask(img);
  img = renameEtm(img);
  return img;
}

var ptsLandsat = pts.map(bufferPoints(15, true));
var etmCol = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
  .filterBounds(ptsLandsat)
  .map(prepEtm);

var params2 = {
  reducer: ee.Reducer.mean(),
  scale: 30,
  crs: 'EPSG:5070',
  bands: ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'],
  bandsRename: ['ls_blue', 'ls_green', 'ls_red', 'ls_nir', 'ls_swir1', 'ls_swir2'],
  imgProps: ['LANDSAT_ID', 'SATELLITE'],
  imgPropsRename: ['img_id', 'satellite'],
  datetimeName: 'date',
  datetimeFormat: 'YYYY-MM-dd'
};

// Extract zonal statistics per point per image.

var ptsLandsatStats = zonalStats(etmCol, ptsLandsat, params2);
print(ptsLandsatStats);
Export.table(ptsLandsatStats)
