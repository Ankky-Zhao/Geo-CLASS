// Phần I: Thu thập ảnh và các chỉ số, thông tin metadata



var QS_DN = /* color: 98ff00 */ee.Geometry.Polygon(

        [[[107.66189575195312, 12.1140752287522],

          [107.97500610351562, 12.020069009772389],

          [108.08349609375, 12.25636442498312],

          [107.73468017578125, 12.338213104192482]]]);

          

var s2 = ee.ImageCollection("COPERNICUS/S2");



// Choose Image Collection: Sentinel-2 (s2) or Landsat 8 Raw (l8raw):

var collection = s2;//l8raw



// Choose study area: Ca Mau or Dak Nong





var Socson_Hn = ee.FeatureCollection('ft:1ovvyN_dzo01mRw8uSNMIYNg-HKyGTrqLErfg26X0','geometry');



var Socson_Hnp = ee.FeatureCollection('ft:1ovvyN_dzo01mRw8uSNMIYNg-HKyGTrqLErfg26X0','geometry');



var Socson_Hnr = ee.FeatureCollection('ft:1ovvyN_dzo01mRw8uSNMIYNg-HKyGTrqLErfg26X0','geometry');





//Add original points to the map in pink.

Map.addLayer(Socson_Hnp, {

    'color': 'ff00ff',

    'opacity': 0.5

});





var myArea = Socson_Hn;





var empty = ee.Image().byte();

var outline = empty.paint({featureCollection: myArea, color: 1, width: 3});

Map.centerObject(myArea,9);

Map.addLayer(outline, {palette: 'FF0000'}, 'myarea');



  

var collect = collection

                  .filterDate('2016-03-1', '2016-04-30')

                  .sort('system:time_start', false)

                  .filterBounds(myArea)

                  .select(['B2','B3','B4', 'B5','B8', 'B12']);



// This function calculates the NDVI

var addNDVI = function(image) {

  return image.addBands(image.normalizedDifference(['B8', 'B4']));

};



// This maps the function over the entire image collection

var myImages0 = collect.map(addNDVI);



// This function calculates the NBR

var addNBR = function(image) {

  return image.addBands(image.normalizedDifference(['B8', 'B12']));

};



// This maps the function over the entire image collection

var myImages1 = myImages0.map(addNBR);





var myImages = myImages1.select(['nd','nd_1','B2','B3','B4', 'B8', 'B12']);







// For special image collections, cast the band types correctly

var collectionID = myImages.getInfo().id;

if(collectionID === 'COPERNICUS/S2'){

  myImages = myImages.map(function(img){

    return img.float(); // cast to signed int16

  });

}

if(collectionID === 'LANDSAT/LC8_L1T_TOA'){

  myImages = myImages.map(function(img){

    return img.float(); // cast to float32

  });

}





print('Images',myImages);



// Export properties (including ID) for each image to a csv file

var imageProperties = myImages.map(function(img){

  var fOut = ee.Feature(img.geometry());

  return fOut.copyProperties(img);

});

Export.table.toDrive(imageProperties,'ImageProperties');



// Create and export Mosaic

var myMosaic = myImages.mosaic().uint16();

print('Mosaic',myMosaic);



Export.image.toDrive({

  image: myMosaic,

  description: 'Mosaic',

  scale: 10, // Set this to resolution (in meters) you want for image

  region: myArea

});





// For exporting individual scenes run the code below: 

var myImagesList = myImages.toList(1000); //Make this number larger than how many images you expect

print('Images',myImages);



var imageIDs = myImagesList.map(function(img){

  img = ee.Image(img);

  return img.get('system:index');

});

print(imageIDs);





// Export images

imageIDs.evaluate(

  function(imageIDsClient) {

    imageIDsClient.map(function(ID){

      var img = myImages.filter(ee.Filter.equals('system:index',ID));

      img = ee.Image(img.first());

      Export.image.toDrive({

        image: img,

        description: ID,

        scale: 10, // Set this to resolution (in meters) you want for image

        region: myArea

      });

    });

  }

);







/// Phần II:Phát hiện sớm mất rừng, suy thoái rừng và lửa rừng bằng ảnh Sentinel 2

var faoi = ee.FeatureCollection('ft:1ovvyN_dzo01mRw8uSNMIYNg-HKyGTrqLErfg26X0','geometry');



var faoip = ee.FeatureCollection('ft:1ovvyN_dzo01mRw8uSNMIYNg-HKyGTrqLErfg26X0','geometry');



var faoir = ee.FeatureCollection('ft:1ovvyN_dzo01mRw8uSNMIYNg-HKyGTrqLErfg26X0','geometry');





var aoi = ee.Image().paint(faoir,'#f00',3);



var faoip1 = ee.Image().paint(faoip,'#f00',100);



//Add original points to the map in pink.

Map.addLayer(Socson_Hnp, {

    'color': 'ff00ff',

    'opacity': 0.5

});





var images=[

  ee.ImageCollection('COPERNICUS/S2')

  .filterDate('2016-03-15', '2016-04-15')

  .select(['B2','B3','B4','B5','B6','B7','B8','B12'])

  .mosaic(),

  ee.ImageCollection('COPERNICUS/S2')

  .filterDate('2016-06-25', '2016-06-30')

  .select(['B2','B3','B4','B5','B6','B7','B8','B12'])

  .mosaic()

  ];



var vis = [

  {gamma: 1.3, min: 0, max: 13000, bands: ['B12', 'B8', 'B2']},

  {gamma: 1.3, min: 0, max: 13000, bands: ['B12', 'B8', 'B2']}

];



var NAMES = [

  'Trước',

  'Sau',

];





// Create a map for each visualization option.

var maps = [];

NAMES.forEach(function(name,index) {

  var map = ui.Map();

  map.add(ui.Label(name));

  map.addLayer(images[index], vis[index], name);

  map.addLayer(aoi, {palette: '#f00'}, 'aoi');

  map.addLayer(faoip1, {palette: '#f00'}, 'faoip');

   //Add original points to the map in pink.

  map.addLayer(Socson_Hnp, {

    'color': 'ff00ff',

    'opacity': 0.5

});

  map.setControlVisibility(true);

  maps.push(map);

 



});







var linker = ui.Map.Linker(maps);

// Enable zooming on the top-left map.

maps[0].setControlVisibility({zoomControl: true});

// Show the scale (e.g. '500m') on the bottom-right map.

maps[0].setControlVisibility({scaleControl: true});

maps[1].setControlVisibility({scaleControl: true});

// Create a title..

var title = ui.Label('Phát hiện sớm mất rừng và lửa rừng ở Mường Nhé - Điện Biên bằng ảnh vệ tinh Sentinel 2', {

  stretch: 'horizontal',

  textAlign: 'center',

  fontWeight: 'bold',

  fontSize: '24px',

  color: 'FF0000'

});





// Create a panel to hold our widgets.

var panel = ui.Panel();

panel.style().set('width', '300px');





// Create a grid of maps.

var mapGrid = ui.Panel([

    ui.Panel([maps[0]], null, {stretch: 'both'}),

    ui.Panel([maps[1]], null, {stretch: 'both'})

  ],

  ui.Panel.Layout.Flow('horizontal'), {stretch: 'both'}

);



// Add the maps and title to the ui.root.

ui.root.widgets().reset([title, mapGrid]);

ui.root.setLayout(ui.Panel.Layout.Flow('vertical'));



// Center the maps to Quang Son.

maps[0].setCenter(102.5299, 22.1345, 11);





ui.Map.Linker([maps[0], maps[1]]);



// Create an intro panel with labels.

var intro = ui.Panel([

  ui.Label({

    value: 'Two Chart Inspector',

    style: {fontSize: '20px', fontWeight: 'bold'}

  }),

  ui.Label('Click a point on the map to inspect.')

]);

panel.add(intro);



// Create panels to hold lon/lat values.

var lon = ui.Label();

var lat = ui.Label();

panel.add(ui.Panel([lon, lat], ui.Panel.Layout.flow('horizontal')));



/***

 * Add marker point after mouse is clicked

 */

function onMapClick(coords) {

  // Update the lon/lat panel with values from the click event.

  lon.setValue('lon: ' + coords.lon.toFixed(5)),

  lat.setValue('lat: ' + coords.lat.toFixed(5));



  // Add a red dot for the point clicked on.

  var point = ee.Geometry.Point(coords.lon, coords.lat);

  

  var dot = ui.Map.Layer(point, {color: 'FF0000'});

  maps[0].layers().set(1, dot);

  

  var dot = ui.Map.Layer(point, {color: 'FF0000'});

  maps[1].layers().set(1, dot);

}





// Register a callback on the default map to be invoked when the map is clicked.

maps[0].onClick(onMapClick);

maps[1].onClick(onMapClick);



Map.centerObject(aoi, 15);





