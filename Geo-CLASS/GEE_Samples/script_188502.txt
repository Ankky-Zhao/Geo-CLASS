/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var s1 = ee.ImageCollection("COPERNICUS/S1_GRD"),
    roi = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-119.56514186853748, 35.68409136611654],
          [-119.40034694666248, 35.70193656139186],
          [-119.39485378259998, 35.77327740181814],
          [-119.56514186853748, 35.77327740181814]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
Map.centerObject(roi, 7);

Map.addLayer(ee.FeatureCollection(roi).style({color: "red", fillColor: "00000000"}), {}, "roi");

 

var s1Col = s1.filterBounds(roi)

              .filterDate("2022-12-1", "2023-1-17")

              .filter(ee.Filter.listContains("transmitterReceiverPolarisation", "VV"))

              .filter(ee.Filter.eq("instrumentMode", "IW"))

              .filter(ee.Filter.eq("relativeOrbitNumber_start", 40))

              .select("VV")

              .map(function(image) {

                var maskedImage = image.mask().and(image.gte(-30));

                return image.updateMask(maskedImage);

              })

              .map(function(image) {

                var time_start = image.get("system:time_start");

                return image.set("date", ee.Date(time_start).format("yyyyMMdd"));

              })

              .sort("system:time_start");

print("s1Col", s1Col);



/**

 * 大津算法

 */

function OTSU(histogram) {

  var counts = ee.Array(ee.Dictionary(histogram).get('histogram'));

  var means = ee.Array(ee.Dictionary(histogram).get('bucketMeans'));

  var size = means.length().get([0]);

  var total = counts.reduce(ee.Reducer.sum(), [0]).get([0]);

  var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0]);

  var mean = sum.divide(total);

  var indices = ee.List.sequence(1, size);

  var bss = indices.map(function(i) {

    var aCounts = counts.slice(0, 0, i);

    var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0]);

    var aMeans = means.slice(0, 0, i);

    var aMean = aMeans.multiply(aCounts)

                      .reduce(ee.Reducer.sum(), [0]).get([0])

                      .divide(aCount);

    var bCount = total.subtract(aCount);

    var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount);

    return aCount.multiply(aMean.subtract(mean).pow(2)).add(

           bCount.multiply(bMean.subtract(mean).pow(2)));

  });

  return means.sort(bss).get([-1]);

}



var filter = ee.Filter.equals({

  leftField: "date",

  rightField: "date"

});

var join = ee.Join.saveAll("matches");

var joinCol = join.apply(s1Col.distinct("date"), s1Col, filter);

joinCol = joinCol.map(function(image) {

  var tempCol = ee.ImageCollection.fromImages(ee.List(image.get("matches")));

  var dayImg = tempCol.mean().clip(roi);

  var date = image.get("date");

  dayImg = dayImg.set("date", date);

  dayImg = dayImg.set("system:time_start", ee.Date.parse("yyyyMMdd", date).millis());

  return dayImg;

});

joinCol = ee.ImageCollection(joinCol);



var waterImgCol=joinCol.map(function(image) {

  var his = image.reduceRegion({

                    reducer: ee.Reducer.histogram(), 

                    geometry: roi,

                    scale: 100,

                    maxPixels: 1e13,

                    tileScale: 16

                  });

  var threshold = OTSU(ee.Dictionary(his).get("VV"));

  var water = image.lte(threshold);

  water = water.set("date", image.get("date"));

  water = water.set("system:time_start", image.get("system:time_start"));

  water = water.updateMask(water).rename("water");

  var mask = water.connectedPixelCount(10, true);

  water = water.updateMask(mask.gte(10));

  var area = ee.Image.pixelArea().multiply(water);

  var dict = area.reduceRegion({

    reducer: ee.Reducer.sum(),

    geometry: roi,

    scale: 50,

    maxPixels: 1e13, 

    tileScale: 16

  });

  return water.set("area", ee.Number(dict.get("area")).divide(1000000));

});

print("waterImgCol", waterImgCol);

var dataList = waterImgCol.reduceColumns(ee.Reducer.toList(2), ["date", "area"])

                          .get("list");

dataList.evaluate(function(dList) {

  var yValues = [];

  var xValues = [];

  for (var i=0; i<dList.length; i++) {

    var data = dList[i];

    xValues.push(data[0]+"");

    yValues.push(data[1]);

  }

  

  var chart = ui.Chart.array.values(ee.List(yValues), 0, ee.List(xValues))

                .setSeriesNames(["水域面积"])

                .setOptions({

                  title: "水域面积变化趋势", 

                  hAxis: {title: "Date"},

                  vAxis: {title: "水域面积 (km^2)"},

                  legend: null,

                  lineWidth:1,

                  pointSize:2

                });

  print(chart);

});



var params = {

  framesPerSecond: 1,

  region: roi,

  palette: "blue",

  dimensions: 720,

};

print(ui.Thumbnail(waterImgCol, params));



var rawLayer = null;

function addPanel(sCol, key) {

  var id_list = sCol.reduceColumns(ee.Reducer.toList(), [key])

                    .get('list');

  id_list.evaluate(function(ids) {

    var total = ids.length;

    var showTitle = ui.Label("", {fontWeight: 'bold'});

    var curIndex = 0;

    var bPlus = ui.Button("+", function() {

      curIndex += 1;

      if (curIndex >= total) {

        curIndex = 0;

      }

      showTitle.setValue(ids[curIndex]);

      showSelectRawImage(sCol, key, ids[curIndex]);

    });

    var bReduce = ui.Button("-", function() {

      curIndex -= 1;

      if (curIndex < 0) {

        curIndex = total - 1;

      }

      showTitle.setValue(ids[curIndex]);

      showSelectRawImage(sCol, key, ids[curIndex]);

    });

    showTitle.setValue(ids[curIndex]);

    showSelectRawImage(sCol, key, ids[curIndex]);

    var main = ui.Panel({

      widgets: [

        ui.Label('click "+" or "-" to move time window', {fontWeight: 'bold'}),

        bPlus, bReduce,

        ui.Label("select date: ", {fontWeight: 'bold'}),

        showTitle

      ],

      style: {width: '200px', padding: '8px'}

    });

    ui.root.insert(0, main);

  });

}



function showSelectRawImage(sCol, key, value) {

  print("show raw image id is: " + value);

  if (rawLayer !== null) {

    Map.remove(rawLayer);

    rawLayer = null;

  }

  var visParam = {

    palette: "blue"  

  };

  var image = ee.Image(sCol.filter(ee.Filter.eq(key, value)).first());

  rawLayer = Map.addLayer(image, visParam, value);

}



addPanel(waterImgCol, "date");

