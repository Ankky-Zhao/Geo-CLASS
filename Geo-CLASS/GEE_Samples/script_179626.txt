/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var semarang = ee.FeatureCollection("users/KARTIKA_EAA/Semarang");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var geometry = semarang;
var batasprov = semarang;

//cloud mask
function maskL8sr(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = (1 << 3);
  var cloudsBitMask = (1 << 5);
  // Get the pixel QA band.
  var qa = image.select('pixel_qa');
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.updateMask(mask);
}

//vis params
var vizParams = {
  bands: ['B5', 'B6', 'B4'],
  min: 0,
  max: 4000,
  gamma: [1, 0.9, 1.1]
};
var vizParams2 = {
  bands: ['B4', 'B3', 'B2'],
  min: 0,
  max: 3000,
  gamma: 1.4,
};


//load the collection:
{
var col = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
    .map(maskL8sr)
    .filterDate('2019-04-01','2019-08-30')
    .filterBounds(semarang);
}
print(col, 'colection');

// ===== Median
{
var image = col.median().clip(geometry);
print(image, 'image');
Map.addLayer(image, vizParams2);
}

// ===== Set Map Center
print('Set map center')
Map.setCenter(110.000000, -7.2500000, 11);

// ===== Create Legend
// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});

// Create legend title
var legendTitle = ui.Label({
  value: 'Legenda LST',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});

// Add the title to the panel
legend.add(legendTitle);
    
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
      
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
      
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
      
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};

print('Create the legend');

//  Palette with the colors
var LegendPalette =['FFFFFF', 'FF0000'];

// name of the legend
var names = ['Suhu 10C', 'Suhu 40C'];

print('Add color and and names');
// Add color and and names

for (var i = 0; i < 2; i++) {
  legend.add(makeRow(LegendPalette[i], names[i]));
  }  

// add legend to map (alternatively you can also print the legend to the console)  
print('add legend to map');

Map.add(legend);
// ===== Create Legend END



// ===== NDVI:
{
var ndvi = image.normalizedDifference(['B5', 'B4']).rename('NDVI');
var ndviParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
print(ndvi,'ndvi');
Map.addLayer(ndvi, ndviParams, 'ndvi');
}

//

// select thermal band 10(with brightness tempereature), no BT calculation 
 var thermal= image.select('B10').multiply(0.1);
 
 var b10Params = {min: 2878000, max: 3046000, palette: ['blue', 'white', 'green']};
 Map.addLayer(thermal, b10Params, 'thermal');


// find the min and max of NDVI
{
var min = ee.Number(ndvi.reduceRegion({
   reducer: ee.Reducer.min(),
   geometry: geometry,
   scale: 30,
   maxPixels: 1e9
   }).values().get(0));
print(min, 'min');

var max = ee.Number(ndvi.reduceRegion({
    reducer: ee.Reducer.max(),
   geometry: geometry,
   scale: 30,
   maxPixels: 1e9
   }).values().get(0));
print(max, 'max')
}

// ===== Fractional vegetation
{
var fv = ndvi.subtract(min).divide(max.subtract(min)).rename('FV'); 
print(fv, 'fv');
//Map.addLayer(fv);
}


// ===== Emissivity

  var a = ee.Number(0.004);
  var b = ee.Number(0.986);
  var EM = fv.multiply(a).add(b).rename('EMM');
  
  var imageVisParam2 = {min: 0.98, max: 0.99, palette: ['blue', 'white', 'green']};
  Map.addLayer(EM, imageVisParam2,'EMM');

var LST = thermal.expression(
    '(Tb/(1 + (0.001145* (Tb / 1.438))*log(Ep)))-273.15', {
      'Tb': thermal.select('B10'),
      'Ep': EM.select('EMM')
});

{
var min = ee.Number(LST.reduceRegion({
   reducer: ee.Reducer.min(),
   geometry: geometry,
   scale: 30,
   maxPixels: 1e9
   }).values().get(0));
print(min, 'min');
var max = ee.Number(LST.reduceRegion({
    reducer: ee.Reducer.max(),
   geometry: geometry,
   scale: 30,
   maxPixels: 1e9
   }).values().get(0));
print(max, 'max')
}

// ===== Tampilkan LST
Map.addLayer(LST, {min: 10, max: 40, palette: ['blue', 'green','red']},'LST');

Map.addLayer(batasprov, {color: 'FF0000'}, 'Batas Provinsi');
